<?php

/**
 * BaseArtigoComentario
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $artigo_id
 * @property string $conteudo
 * @property boolean $lido
 * @property Artigo $Artigo
 * 
 * @method integer          getArtigoId()  Returns the current record's "artigo_id" value
 * @method string           getConteudo()  Returns the current record's "conteudo" value
 * @method boolean          getLido()      Returns the current record's "lido" value
 * @method Artigo           getArtigo()    Returns the current record's "Artigo" value
 * @method ArtigoComentario setArtigoId()  Sets the current record's "artigo_id" value
 * @method ArtigoComentario setConteudo()  Sets the current record's "conteudo" value
 * @method ArtigoComentario setLido()      Sets the current record's "lido" value
 * @method ArtigoComentario setArtigo()    Sets the current record's "Artigo" value
 * 
 * @package    TCCtrl
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseArtigoComentario extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('artigo_comentario');
        $this->hasColumn('artigo_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('conteudo', 'string', null, array(
             'type' => 'string',
             'notnull' => true,
             ));
        $this->hasColumn('lido', 'boolean', null, array(
             'type' => 'boolean',
             'default' => false,
             'notnull' => true,
             ));

        $this->option('type', 'MyISAM');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Artigo', array(
             'local' => 'artigo_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}